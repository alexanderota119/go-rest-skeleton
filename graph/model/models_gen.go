// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"go-rest-skeleton/domain/entity"
	"io"
	"strconv"
)

type PageConnection interface {
	IsPageConnection()
}

type CreateRoleInput struct {
	Name string `json:"name"`
}

type CreateUserInput struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

type DeleteRoleInput struct {
	Name string `json:"name"`
}

type DeleteUserInput struct {
	UUID string `json:"uuid"`
}

type FindUserInput struct {
	UUID  *string `json:"uuid"`
	Name  *string `json:"name"`
	Email *string `json:"email"`
	Phone *string `json:"phone"`
}

type Pagination struct {
	Page    int `json:"page"`
	PerPage int `json:"perPage"`
	Total   int `json:"total"`
}

type PaginationInput struct {
	Page    int `json:"page"`
	PerPage int `json:"perPage"`
}

type SearchInput struct {
	Method    SearchMethod    `json:"method"`
	Condition SearchCondition `json:"condition"`
}

type SearchUserInput struct {
	Rules    *SearchInput   `json:"rules"`
	Keywords *FindUserInput `json:"keywords"`
}

type UpdateRoleInput struct {
	UUID string `json:"uuid"`
	Name string `json:"name"`
}

type UpdateUserInput struct {
	UUID  string `json:"uuid"`
	Name  string `json:"name"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

type UserConnection struct {
	Pagination *Pagination    `json:"pagination"`
	List       []*entity.User `json:"list"`
}

func (UserConnection) IsPageConnection() {}

type SearchCondition string

const (
	SearchConditionAnd SearchCondition = "AND"
	SearchConditionOr  SearchCondition = "OR"
)

var AllSearchCondition = []SearchCondition{
	SearchConditionAnd,
	SearchConditionOr,
}

func (e SearchCondition) IsValid() bool {
	switch e {
	case SearchConditionAnd, SearchConditionOr:
		return true
	}
	return false
}

func (e SearchCondition) String() string {
	return string(e)
}

func (e *SearchCondition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchCondition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchCondition", str)
	}
	return nil
}

func (e SearchCondition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchMethod string

const (
	SearchMethodExact   SearchMethod = "EXACT"
	SearchMethodSimilar SearchMethod = "SIMILAR"
)

var AllSearchMethod = []SearchMethod{
	SearchMethodExact,
	SearchMethodSimilar,
}

func (e SearchMethod) IsValid() bool {
	switch e {
	case SearchMethodExact, SearchMethodSimilar:
		return true
	}
	return false
}

func (e SearchMethod) String() string {
	return string(e)
}

func (e *SearchMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchMethod", str)
	}
	return nil
}

func (e SearchMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserOrderFields string

const (
	UserOrderFieldsLatest UserOrderFields = "LATEST"
	UserOrderFieldsOldest UserOrderFields = "OLDEST"
)

var AllUserOrderFields = []UserOrderFields{
	UserOrderFieldsLatest,
	UserOrderFieldsOldest,
}

func (e UserOrderFields) IsValid() bool {
	switch e {
	case UserOrderFieldsLatest, UserOrderFieldsOldest:
		return true
	}
	return false
}

func (e UserOrderFields) String() string {
	return string(e)
}

func (e *UserOrderFields) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserOrderFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserOrderFields", str)
	}
	return nil
}

func (e UserOrderFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
